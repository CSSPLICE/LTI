<div class="row" style="margin:50px">
    <span class="span12">
      <div class="text-center">
        <h1>Learning Tools Interoperability®</h1>
      </div><br>
      <p>
        Learning Tools Interoperability® (LTI®) is a specification developed by IMS Global Learning Consortium. The basic motivation behind the concept of LTI is to establish a standard way of integrating remotely hosted learning applications with the platforms like learning management systems and other educational environments.
      </p>
      <h3>Terminologies</h3>
      <p>
        Learning applications are called <strong>Tools</strong> (delivered by Tool Providers) <br><br>
        The LMS, or platforms, are called <strong>Tool Consumers</strong> such as Canvas, Moodle etc.
      </p>
      <h3>Use Cases</h3>
      <p>The LTI specification enhances the functionality provided by a Tool Consumer and provides instructors with various applications that they can embed into their course. For example: </p>
      <ul>
        <li><a href="https://codeworkout.cs.vt.edu/">Code Workout</a> which is developed at Virginia Tech to enable students to write code is a Tool and is hosted on Virginia Tech's servers and Canvas (Tool Consumer) integrates Code Workout seamlessly and enables students to write code on Canvas.</li>
        <li>The <a href="https://www.eduappcenter.com/apps/36#.WcFgotOGM0o" target="_blank">Wikipedia LTI application</a> lets instructors to Search through English Wikipedia articles and link to or embed these articles into course material. </li>
        <li>Similarly, <a href="https://www.eduappcenter.com/apps/12#.WcFgotOGM0p" target="_blank">Piazza LTI application</a> adds a link to the course navigation for Piazza discussions, and auto-logs the user into the course discussions area.</li>
      </ul>
      <h3 id="Introduction">Introduction</h3>
      <p>
        LTI enables the tool consumer to send a user to the tool provider in a trusted way. The trust assertion allows the user to be automatically signed in to the tool provider and directed to the content provided by the tool provider.<br>
        <br>
        <div class="thumbnail" style="float: right; width: 300px; margin-left: 10px;">
          <%= image_tag "iframe.png" %>
        </div>
        <strong>Launch:</strong> The LMS (consumer) launches the tools (provider) in an iframe so they feel like a part of the LMS as shown in the picture below. The user won’t notice if it is a part of Tool Consumer (LMS) or not.
      </p>
      <p>
        <strong>Security:</strong> LTI Authentication uses the OAuth standard, which is a secure protocol over HTTPS for communication between different systems. The consumer and a provider share a consumer key and shared secret that are used to sign any messages passed between the two systems. The signature is done through OAuth, so that the signatures can be verified by either party.
        <br><br>Consumer sends an HTTP POST request to the provider with a key and a secret which can be verified by both parties. These consumer_key and consumer_secret are shared before any LTI requests can happen. The consumer_key is used by both Consumer and Provider to identify who they are talking to. The consumer_secret will be used to digitally sign every request going in either direction.

      </p>
      <div style="clear:both;"></div><br>
      <div class="text-center">
        <h1 id="buildtp">Building an LTI Tool Provider</h1>
      </div><br>
      <p> If you have a learning application that you want to make LTI compatible or if you want to create a new LTI Tool Provider, you just have to implement the following few steps.</p>
      <strong>
        Step 1: Tool Consumer Registration
      </strong><br>
      <p>
        Provide an option to register Tool Consumer with a key and secret, which can be shared with Tool Consumer. The minimum data required for each Tool Consumer is their key and secret but you may want to add additional data fields while registering a Tool Consumer. For example, you may want to keep track of the name of tool consumer, when the particular tool consumer registered, when did it last access and similarly various other things you would like.
      </p>

      <strong>
        Step 2: Setup a Launch URL
      </strong><br>
      <p>
        Setup a URL which will receive an HTTP POST message from Tool Consumer. The script at this page should first verify if the received request is an LTI request or not. The POST request should contain <strong>lti_message_type</strong> with a value of 'basic-lti-launch-request', <strong>lti_version</strong> with a value of LTI-1p0 for LTI 1, <strong>oauth_consumer_key</strong>, and a <strong>resource_link_id</strong> which is a unique id referencing the link, or placement, of the app in the consumer. If any of these are missing, then the request is not an LTI request. After verifying the request as an LTI request, the next step is to verify the authenticity of the request.
      </p>
      <strong>
        Step 3: Authenticate the request
      </strong><br>
      <p>
        All LTI launch requests are signed using OAuth 1 in order to ensure that the request is sent by the registered Consumer and the data was not altered en-route to Provider. This can also help in determining if the same request was received before or not and is just a duplicate request. The data received will have the following OAuth parameters
        <ul>
          <li>oauth_callback – about:blank</li>
          <li>oauth_consumer_key – The unique key assigned to each Tool Consumer.</li>
          <li>oauth_nonce – A unique value identifying the message which helps in identifying the duplicate messages.</li>
          <li>oauth_signature – On Tool Provider end, key and secret is used to generate a signature and the generated signature must match with this signature.</li>
          <li>oauth_signature_method – the method used to generate the signature, LTI currently supports HMAC-SHA1.</li>
          <li>oauth_timestamp – The time at which the message was signed. This should be checked that if the server time is within specific time interval of this timestamp (typically 5 minutes).</li>
          <li>oauth_version – The OAuth version used</li>
        </ul>
      </p>

      <strong>
        Step 4: Launch
      </strong><br>
      <p>
        At this point, you now have a valid LTI request, and it is best to know what parameters are coming are in the request from Consumer because LTI specification has a very few required parameters and others are either recommended or optional. If you are receiving user_id, and if your application requires user login, you will have to start a session for that user. If the user is a new user, you will have to create an account first before starting his session. The request may contain many other parameters such as, Name of a user, course id etc.<br><br>
        Following is a list of parameters that LTI specification provides. There can be other parameters that Consumer may want to send and those parameters will have a prefix "custom". <br>
        <ul>
          <ol>
            <li>Required Parameters</li>
            <ul>
              <li>lti_message_type</li>
              <li>lti_version</li>
              <li>resource_link_id</li>
            </ul><br>
            <li>Recommended Parameters</li>
            <ul>
              <li>user_id </li>
              <li>roles </li>
              <li>lis_person_name_full </li>
              <li>lis_person_name_given </li>
              <li>lis_person_name_family </li>
              <li>lis_person_contact_email_primary </li>
              <li>resource_link_title </li>
              <li>context_id </li>
              <li>context_title </li>
              <li>context_label </li>
              <li>launch_presentation_locale </li>
              <li>launch_presentation_document_target </li>
              <li>launch_presentation_width </li>
              <li>launch_presentation_height </li>
              <li>launch_presentation_return_url </li>
              <li>tool_consumer_info_product_family_code </li>
              <li>tool_consumer_info_version </li>
              <li>tool_consumer_instance_guid	strongly </li>
              <li>tool_consumer_instance_name </li>
              <li>tool_consumer_instance_contact_email </li>
            </ul><br>
            <li>Optional Parameters</li>
            <ul>
              <li>lis_outcome_service_url </li>
              <li>selection_directive </li>
              <li>resource_link_description </li>
              <li>context_type </li>
              <li>launch_presentation_css_url </li>
              <li>tool_consumer_instance_description </li>
              <li>tool_consumer_instance_url </li>
              <li>user_image</li>
              <li>custom_* </li>
            </ul><br>
          </ol>
        </ul>
      </p>

      <strong>
        Step 5: Provide Configuration for Tool Consumer
      </strong><br>
      <p>
        Tool Consumer requires a launch URL, key, secret and other settings such as placement of your application in Tool Consumer. The best practice is to provide an XML Configuration file, which can be copied into Tool Consumer to make your tool available to Instructors in Tool Consumer to use. You may use <a href="https://www.edu-apps.org/build_xml.html">this link</a> to generate your XML file.
      </p>
      <p>The XML File has a structure is
        <pre><xmp>   <?xml version="1.0" encoding="UTF-8"?>
      <cartridge_basiclti_link xmlns="http://www.imsglobal.org/xsd/imslticc_v1p0"
        xmlns:blti = "http://www.imsglobal.org/xsd/imsbasiclti_v1p0"
        xmlns:lticm ="http://www.imsglobal.org/xsd/imslticm_v1p0"
        xmlns:lticp ="http://www.imsglobal.org/xsd/imslticp_v1p0"
        xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation = "http://www.imsglobal.org/xsd/imslticc_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticc_v1p0.xsd
        http://www.imsglobal.org/xsd/imsbasiclti_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imsbasiclti_v1p0.xsd
        http://www.imsglobal.org/xsd/imslticm_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticm_v1p0.xsd
        http://www.imsglobal.org/xsd/imslticp_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticp_v1p0.xsd">
      <blti:title>[Your App Title]</blti:title>
      <blti:description>[Your App Description]</blti:description>
      <blti:icon></blti:icon>
      <blti:launch_url>[Your Launch URL]</blti:launch_url>
      <blti:extensions platform="canvas.instructure.com">
        <lticm:property name="privacy_level">public</lticm:property>
      </blti:extensions>
      <cartridge_bundle identifierref="BLTI001_Bundle"/>
      <cartridge_icon identifierref="BLTI001_Icon"/>
    </cartridge_basiclti_link></xmp></pre>
<br>
    If you want your application to appear under course navigation section of Canvas, you will have to add option under extensions in XML. For example:
<br><br>
    <pre><xmp>   <?xml version="1.0" encoding="UTF-8"?>
      <cartridge_basiclti_link xmlns="http://www.imsglobal.org/xsd/imslticc_v1p0"
        xmlns:blti = "http://www.imsglobal.org/xsd/imsbasiclti_v1p0"
        xmlns:lticm ="http://www.imsglobal.org/xsd/imslticm_v1p0"
        xmlns:lticp ="http://www.imsglobal.org/xsd/imslticp_v1p0"
        xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation = "http://www.imsglobal.org/xsd/imslticc_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticc_v1p0.xsd
        http://www.imsglobal.org/xsd/imsbasiclti_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imsbasiclti_v1p0.xsd
        http://www.imsglobal.org/xsd/imslticm_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticm_v1p0.xsd
        http://www.imsglobal.org/xsd/imslticp_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticp_v1p0.xsd">
      <blti:title>[Your App Title]</blti:title>
      <blti:description>[Your App Description]</blti:description>
      <blti:icon></blti:icon>
      <blti:launch_url>[Your Launch URL]</blti:launch_url>
      <blti:extensions platform="canvas.instructure.com">
        <lticm:property name="privacy_level">public</lticm:property>
        <lticm:options name="course_navigation">
          <lticm:property name="url">[Your Launch URL]</lticm:property>
          <lticm:property name="text">[Course Navigation Text]</lticm:property>
          <lticm:property name="visibility">public</lticm:property>
          <lticm:property name="default">enabled</lticm:property>
          <lticm:property name="enabled">true</lticm:property>
        </lticm:options>
      </blti:extensions>
      <cartridge_bundle identifierref="BLTI001_Bundle"/>
      <cartridge_icon identifierref="BLTI001_Icon"/>
    </cartridge_basiclti_link></xmp></pre>
      </p>
<br/>
      <strong id="ssl">
        Step 6: Get SSL Certificate
      </strong><br>
      <p>
        If Canvas launches your unsecure application, it will show a warning and will ask the user to open the application in new tab, which does not present a good user experience. Therefore, you should get a SSL certificate so your application can run over HTTPS and open in an iframe. LTI Authentication uses the OAuth standard, which is a secure protocol over HTTPS for communication between systems. Get a PEM certificate if you are developing locally. You'll eventually need one for your production server as well.
      </p>
      <p>Following are the steps for generating SSL certificate locally on UNIX environment</p>
      <pre>
      Step 1: Create your private key with any password.
      $ openssl genrsa -des3 -out server.orig.key 2048

      Step 2: Remove the password
      $ openssl rsa -in server.orig.key -out server.key

      Step 3: Generate the Certificate Signing Request and enter localhost.ssl in Common Name
      $ openssl req -new -key server.key -out server.csr

      Step 4: Generate self signed SSL certificate
      $ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

      Step 5) Add localhost.ssl to your hosts file
      $ echo "127.0.0.1 localhost.ssl" | sudo tee -a /private/etc/hosts

      Step 6) To run a rails application, use following command
      $ thin start --ssl --ssl-key-file server.key --ssl-cert-file server.crt</pre>

      <p>When you run your application first time, you will have to add it to trusted system.</p>
    </span>

</div>
