<div class="row" style="margin:50px">
  <span class="span12">
    <div class="text-center">
      <h1>OpenDSA - an LTI Use Case</h1>
    </div>
    <br>
    <p>
      OpenDSA is an eBook project developed at Virginia Tech. OpenDSA materials
      include many visualizations and interactive exercises that support
      courses in a wide variety of Computer Science-related topics such as Data
      Structures and Algorithms (DSA), Formal Languages, Finite Automata, and
      Programming Languages.
    </p>
    <h3>OpenDSA Terminologies</h3>
    <p>
      <strong>Module:</strong> A single HTML page, corresponding to a single
      section in a textbook, or a single topic that might be part of a lecture.
      <br><br>
      <strong>Book Instance:</strong> Modules collected together form an
      OpenDSA Book Instance.<br><br>
      <strong>Course Offering</strong> Course offering is a way to uniquely
      identify a course. It is a combination of organization and course name.
      For example, Virginia Tech is an organization, CS 3114 is a course and
      course offering is a unique instance of each CS 3114 offered at Virginia
      Tech.
    </p>
    <p>
      OpenDSA currently has two hundred instructional modules, where each
      module is the equivalent to one topic, such as one sorting algorithm.
      Every algorithm or data structure is illustrated by an interactive
      algorithm visualization. Students could enter their own test cases to see
      how the algorithm or data structure works on that input, and they can
      control the pacing of the visualization. <a
      href="https://opendsa-server.cs.vt.edu/home/about"> Click here</a> to
      read more about OpenDSA.
    </p>
    <h3>OpenDSA Instructions</h3>
    <p>
      OpenDSA can be added as either graded or ungraded
      content.</strong> To insert as OpenDSA content in your course
      follow the steps mentioned
      <%= link_to "here", lti_instructions_opendsa_path %>
    </p>
    <h3>LTI in OpenDSA</h3>
    <p>
      OpenDSA implements LTI therefore, it can be easily integrated in Learning
      Management Systems. OpenDSA exercise in Canvas looks like:
      <div class="text-center">
        <%= image_tag "OpenDSA/tree_exercise.png", style:'width:40%' %>
      </div>
      This exercise shown above looks like a part of Canvas course, which is
      accomplished through LTI. In Canvas, there are two ways to add OpenDSA
      content, one is to add a standalone exercise using External Tools and the
      second method is to go on OpenDSA website, create a book instance and it
      automatically creates all the exercises as a modules in Canvas. But this
      later feature is only available for Canvas because it uses Canvas API to
      create modules in Canvas. Once OpenDSA content is added into the course
      with either of the methods mentioned above, then it uses LTI to launch,
      show and grade an exercise within tool consumer.
    </p>
    <p>
      To make use of LTI, OpenDSA implements LTI controller, which handles all
      the LTI requests. There are two types of LTI requests in OpenDSA, one is
      for a student and other is for instructors. When an instructor adds an
      OpenDSA content, he sees a list of exercises he can add to his course and
      for that a <strong>resource</strong> endpoint is called.
      <strong>Launch</strong> endpoint is called when a student
      accesses OpenDSA exercise.
    </p>
    In start of LTI controller (apps/controllers/lti_controller.rb) it allows
    launch and a resource endpoint to open in an iframe. This allows OpenDSA
    exercises to embed in LMS.<br><br>
    <pre>
      after_action :allow_iframe, only: [:launch, :resource]
    </pre>

    We will begin with explanation of launch endpoint here. Once OpenDSA
    content is added into a course and a student clicks on an OpenDSA
    exercise, it sends an LTI request to the launch endpoint.
    Within the launch endpoint, it first validates if 'custom_inst_book_id' is
    available or not. This is a custom parameter, and it checks if this
    parameter is available then the custom book instance was created on OpenDSA
    website and modules were created using Canvas API. If the book instance is
    not present, it calls the endpoint 'launch_ex' which means that it is a
    standalone exercise.<br><br>
    <pre>
      unless params.key?(:custom_inst_book_id)
        launch_ex
        return
      end
    </pre>

    Now first we will cover launch_ex endpoint <strong> which means a standalone
    exercise is launched by the student.</strong> To add standalone graded
    exercises in your course follow the steps mentioned
    <%= link_to "here", lti_instructions_opendsa_path %>.<br><br>

    When a student clicks on an assignment, first steps that are performed are
    that it first fetches credentials (unique secret) from public
    authentication key received in a request and find course offering to which
    assignment belongs.<br><br>
    <pre>
    def launch_ex
      require 'oauth/request_proxy/rack_request'
      $oauth_creds = LmsAccess.get_oauth_creds(params[:oauth_consumer_key])
      course_offering = CourseOffering.joins(:lms_instance).where(
        lms_instances: {url: params[:custom_canvas_api_base_url]},
        course_offerings: {lms_course_num: params[:custom_canvas_course_id]}
      ).first
    </pre>
    After that it calls 'lti_authorize!' endpoint to validate the request
    received.<br><br>
    <pre>
      render('error') and return unless lti_authorize!
    </pre>

    Within lti_authorize endpoint, it creates a tool provider object from the
    authentication object created above. If a key and secret does not match, it
    throws an error and return.<br><br>

    <pre>
      def lti_authorize!
        if key = params['oauth_consumer_key']
          if secret = $oauth_creds[key]
            @tp = IMS::LTI::ToolProvider.new(key, secret, params)
          else
            @tp = IMS::LTI::ToolProvider.new(nil, nil, params)
            @tp.lti_msg = "Your consumer didn't use a recognized key."
            @tp.lti_errorlog = "You did it wrong!"
            @message = "Consumer key wasn't recognized"
            return false
          end
        else
          render("No consumer key")
          return false
        end
    </pre>

    Once, key and a secret matches, it then within the same 'lti_authorize!'
    endpoint checks if the request is valid or not, or if the timestamp on
    request is too old. If so, then it returns an error otherwise, it return
    true to launch endpoint, which means the request is valid.<br><br>

    <pre>
        if !params.has_key?(:selection_directive)
          if !@tp.valid_request?(request)
            @message = "The OAuth signature was invalid"
            return false
          end

          if Time.now.utc.to_i - @tp.request_oauth_timestamp.to_i > 60*60
            @message = "Your request is too old."
            return false
          end

          if was_nonce_used_in_last_x_minutes?(@tp.request_oauth_nonce, 60)
            @message = "Why are you reusing the nonce?"
            return false
          end
        end

        return true
      end
    </pre>

    Once the request has been validated, it returns to launch_ex endpoint and in
    the next step it calls 'ensure_user'.<br><br>
    <pre>
      ensure_user()
    </pre>

    Within 'ensure_user' it first checks if a user with a same email exists and
    creates a new user it that email is not found and finally signs in that
    user to start his session.<br><br>
    <pre>
      def ensure_user
        email = params[:lis_person_contact_email_primary]
        @user = User.where(email: email).first
        if @user.blank?
          # TODO: should mark this as LMS user then prevent this user from
          login to opendsa domain
          @user = User.new(:email => email,
                           :password => email,
                           :password_confirmation => email,
                           :first_name => params[:lis_person_name_given],
                           :last_name => params[:lis_person_name_family])
          @user.save
        end
        sign_in @user
      end
    </pre>

    Once it creates a new user, it then calls 'lti_enroll' with course offering
    object, which enrolls user into this course.<br><br>
    <pre>
      lti_enroll(@course_offering)
    </pre>

    Within 'lti_enroll', it first checks if the course offering exists and it
    allows users to enroll or not and finally it enrolls the user if he has not
    already enrolled into this specific course offering.<br><br>
    <pre>
      def lti_enroll(course_offering, role = CourseRole.student)
        if course_offering &&
          course_offering.can_enroll? &&
          !course_offering.is_enrolled?(current_user)

          CourseEnrollment.create(
            course_offering: course_offering,
            user: current_user,
            course_role: role)
        end
      end
    </pre>

    Once the request has been validated and a user has been enrolled, it uses
    RST parser, which parses the names of exercises in RST files and finds the
    current exercise with its name.<br><br>

    <pre>
      require 'RST/rst_parser'
      @ex = RstParser.get_exercise_map()[params[:ex_short_name]]
    </pre>

    After that, it finds the course offering exercise object with course
    offering id and resource_link_id object received in a request. A
    resource_link_id is a unique id referencing the link, or placement, of the
    tool within the consumer's pages.<br><br>

    <pre>
      @course_off_ex = InstCourseOfferingExercise.find_by(
        course_offering_id: course_offering.id,
        resource_link_id: params[:resource_link_id]
      )
    </pre>
    If this exercise is launched first time, then it will not find this
    exercise linked to course offering and it then links the current exercise
    with course offering.<br><br>
    <pre>
      if @course_off_ex.blank?
        @course_off_ex = InstCourseOfferingExercise.new(
          course_offering: course_offering,
          inst_exercise_id: @ex.id,
          resource_link_id: params[:resource_link_id],
          resource_link_title: params[:resource_link_title],
          threshold: @ex.threshold
        )
        @course_off_ex.save
      end
    </pre>

    Once the exercise is linked to the course offering, the last thing left is
    to show the exercise to user. There are two kinds of exercises in OpenDSA,
    one is avembed, which have their own html pages and other is inlineav, which
    are generated through JavaScript and CSS. It checks the type of exercise and
    renders the respective layout to user. <br><br>
    <pre>
      if @ex.instance_of?(AvEmbed)
        render "launch_avembed", layout: 'lti_launch' #own html page
      else
        render 'launch_inlineav', layout: 'lti_launch'
      end
    end
    </pre>
  <p>
    At this point student will view an exercise. Following in one example of
    OpenDSA Binary Tree exercise as an assignment.
    <div class="text-center">
      <%= image_tag "OpenDSA/single_exercise.png", style:'width:40%' %>
    </div>
  </p>

  Once, student finishes an exercise, it sends a request to
  <strong>assessment</strong> endpoint from JavaScript which sends score back
  to Tool Consumer if the request was called as an assessment.
  <br><br>
  Within assessment endpoint, initially it checks if the exercise is from a
  book instance or not. If exercise if from a book instance then the request
  will have 'instBookSectionExerciseId' parameter and it fetches number of
  attempts on this exercise and current progress of a student using the book
  instance exercise id and user id.<br><br>
  <pre>

  def assessment
    request_params = JSON.parse(request.body.read.to_s)
    hasBook = request_params.key?('instBookId')

    if hasBook
      inst_section = InstSection.find_by(id: request_params['instSectionId'])

      @odsa_exercise_attempts =
      OdsaExerciseAttempt.where("inst_book_section_exercise_id=? AND user_id=?",
                                  request_params['instBookSectionExerciseId'],
                                  current_user.id).select(
                                  "id, user_id, question_name, request_type,
                                  correct, worth_credit, time_done, time_taken,
                                  earned_proficiency, points_earned,
                                  pe_score, pe_steps_fixed")
      @odsa_exercise_progress =
      OdsaExerciseProgress.where("inst_book_section_exercise_id=? AND
      user_id=?",
                                  request_params['instBookSectionExerciseId'],
                                  current_user.id).select("user_id,
                                  current_score, highest_score,
                                  total_correct, proficient_date,first_done,
                                  last_done")
    </pre>
    If exercise is not from a book instance then the request will have
    'instCourseOfferingExerciseId' parameter, which means that individual
    exercise is directly added to the course. Here it fetches number of
    attempts on this exercise and current progress of a student using the
    course offering exercise id and user id.<br><br>
    <pre>
    else
      @odsa_exercise_attempts =
      OdsaExerciseAttempt.where("inst_course_offering_exercise_id=? AND
      user_id=?",
                                  request_params['instCourseOfferingExerciseId']
                                  , current_user.id).select(
                                  "id, user_id, question_name, request_type,
                                  correct, worth_credit, time_done, time_taken,
                                  earned_proficiency, points_earned,
                                  pe_score, pe_steps_fixed")
      @odsa_exercise_progress =
      OdsaExerciseProgress.where("inst_course_offering_exercise_id=? AND
      user_id=?",
                                  request_params['instCourseOfferingExerciseId']
                                  , current_user.id).select("user_id,
                                  current_score, highest_score,
                                  total_correct, proficient_date,first_done,
                                  last_done")
    end
    </pre>

    Once progress and attempts have been fetched, it sends this back in tabular
    form to Tool Consumer along with the results of exercises and students can
    view these stats.<br><br>
    <pre>
    a = @odsa_exercise_attempts
    b = @odsa_exercise_progress
    TableHelper.arg(a, b)
    f = render_to_string "lti/table.html.erb"
    </pre>
    <p>
      The progress and attempts can be checked in Canvas by clicking on Grades
      -> [Name of Assignment]. Following in how this result is shown in tabular
      form in Canvas.
      <div class="text-center">
        <%= image_tag "OpenDSA/exercise_progress.png", style:'width:40%' %>
      </div>
    </p>


    After that, it fetches the launch parameters from the request and finds the
    authentication credentials associated with the public consumer key so that
    it can send the results back to tool consumer.<br><br>
    <pre>
      launch_params = request_params['toParams']['launch_params']
      if launch_params
        key = launch_params['oauth_consumer_key']
        $oauth_creds = LmsAccess.get_oauth_creds(key)
      else
        @message = "The tool never launched"
        render(:error)
      end
    </pre>

    Once the credentials have been fetched, it submits the score back to tool
    consumer. It creates a tool provider object using the
    key and a secret and after that it extends the tool provider object with
    the OutcomeData extension provided by the IMS-LTI gem.<br><br>
    <pre>
      lti_param = {
        "lis_outcome_service_url" =>
        "#{launch_params['lis_outcome_service_url']}",
        "lis_result_sourcedid" => "#{launch_params['lis_result_sourcedid']}"
      }
      @tp = IMS::LTI::ToolProvider.new(key, $oauth_creds[key], lti_param)

      @tp.extend IMS::LTI::Extensions::OutcomeData::ToolProvider
    </pre>
    After that it checks whether the tool was launched as an
    outcome service or not.<br><br>
    <pre>
      if !@tp.outcome_service?
        @message = "This tool wasn't lunched as an outcome service"
        render(:error)
      end

      # post the given score to the TC
      score = (request_params['toParams']['score'] != '' ?
      request_params['toParams']['score'] : nil)
      #res = @tp.post_replace_result!(score)
      res = @tp.post_extended_replace_result!(score: score, text: f)
    </pre>
    This means that if the tool was launched as an assignment,
    then OpenDSA has to send the final result of an assessment back to the tool
    consumer.
    Therefore, in its request it
    sends <strong><em>lis_outcome_service_url</em></strong>
    and <strong><em>lis_result_sourcedid</em></strong>.
    The fist parameter is a URL used to send the score back, and
    the second parameter identifies a unique row and column within
    the Tool Consumer's gradebook.
    If these two parameters are not present, then it throws as error and
    otherwise it posts the result back to the tool consumer.
    The IMS-LTI gem enables to accomplish all
    of this using 'post_extended_replace_result'.
    <br><br>
    Once the result has been posted and if the exercise was launched from a
    book instance it saves that the result has been posted for this exercise
    along with current time.<br><br>
    <pre>
      if res.success?
        if hasBook
          inst_section.lms_posted = true
          inst_section.time_posted = Time.now
          inst_section.save!
        end
        render :json => { :message => 'success', :res => res.to_json }.to_json
    </pre>
    If there is some error in posting result, it saves in the database that the
    result posting failed for this instance and throws an error.<br><br>
    <pre>
      else
        if hasBook
          inst_section.lms_posted = false
          inst_section.save!
        end
        render :json => { :message => 'failure', :res => res.to_json }.to_json,
        :status => :bad_request
        error = Error.new(:class_name => 'post_replace_result_fail',
            :message => res.inspect, :params => lti_param.to_s)
        error.save!
      end
    </pre>
    <br>

    <p>
      In the example shown above, once student finishes the exercise and clicks
      on a grade, the 'assessment' endpoint is called and he will see his score
      as shown in the image below.
      <div class="text-center">
        <%= image_tag "OpenDSA/single_exercise_result.png", style:'width:40%' %>
      </div>
      <br><br>
      This result is also recorded in the gradebook as shown below.<br><br>
      <div class="text-center">
        <%= image_tag "OpenDSA/single_exercise_grade.png", style:'width:40%' %>
      </div>
    </p>
    <br>

    This is how LTI is implemented in OpenDSA when a student tries to access a
    standalone OpenDSA exercise through a learning management system. Now,
    click <%= link_to "here", lti_opendsa_bookinstance_path %> to read how
    OpenDSA implements LTI for a book instance exercise. <br><br>

    Also, click <%= link_to "here", lti_opendsa_instructor_path %> to read how
    OpenDSA implements LTI when instructors add exercises to their courses.
  </span>
</div>
