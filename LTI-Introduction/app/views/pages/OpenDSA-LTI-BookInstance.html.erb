<div class="row" style="margin:50px">
  <span class="span12">
    <div class="text-center">
      <h1>LTI in OpenDSA - Book Instance Exercises</h1>
    </div>
    <br>
    <p>
      Previously, we have shown <%= link_to "here", lti_opendsa_path %> that how
      OpenDSA implements LTI when a student tries to access a standalone
      exercise from a tool consumer. In this tutorial we explain further the
      <strong>launch</strong> endpoint that how OpenDSA makes use of LTI when a
      student accesses an exercise from an OpenDSA book instance (generated
      through OpenDSA website). Note that a <strong>Launch</strong> endpoint is
      called when a student accesses OpenDSA exercise and a
      <strong>resource</strong> endpoint is called when an instructor adds any
      OpenDSA content and he sees a list of exercises he can add to his course.
    </p>

    Once the OpenDSA content is added into a course and a student clicks on an
    OpenDSA exercise, Tool Consumer sends an LTI request to the launch endpoint
    of OpenDSA. Within the launch endpoint, OpenDSA initially validates if
    "custom_inst_book_id" is available or not. This is a custom parameter,
    which if available means that the OpenDSA book instance was created on
    OpenDSA's website and modules were created in Canvas using Canvas API and
    this exercise belongs to an OpenDSA book instance. If the book instance is
    not present, it means that this is a standalone exercise and OpenDSA calls
    the "launch_ex" endpoint to handle the standalone exercises. <br><br>
    <pre>
      unless params.key?(:custom_inst_book_id)
        launch_ex
        return
      end
    </pre>

    If the exercise is from a book instance then within the launch endpoint,
    OpenDSA finds the book instance from the custom book instance id received
    in the request and fetches the course offering this book instance belongs
    to. In OpenDSA, a course offering is a way to uniquely identify a
    course.<br><br>
    <pre>
      # must include the oauth proxy object
      require 'oauth/request_proxy/rack_request'
      @inst_book = InstBook.find_by(id: params[:custom_inst_book_id])
      @course_offering = CourseOffering.find_by(id:
      @inst_book.course_offering_id)
    </pre>
    Once, the book instance and course offering is fetched, OpenDSA validates
    if the received request is an authentic LTI request or not. To do so,
    OpenDSA first fetches the credentials (unique secret) from the public
    authentication key received in the request and calls the
    <em>"lti_authorize!"</em> method.<br><br>

    <pre>
      $oauth_creds = LmsAccess.get_oauth_creds(params[:oauth_consumer_key])
      render('error') and return unless lti_authorize!
    </pre>

    Within the <em>lti_authorize!</em> endpoint, OpenDSA creates a tool
    provider object from the authentication object created above and throws an
    error and returns in case the key and secret do not match.<br><br>

    <pre>
      def lti_authorize!
        if key = params['oauth_consumer_key']
          if secret = $oauth_creds[key]
            @tp = IMS::LTI::ToolProvider.new(key, secret, params)
          else
            @tp = IMS::LTI::ToolProvider.new(nil, nil, params)
            @tp.lti_msg = "Your consumer didn't use a recognized key."
            @tp.lti_errorlog = "You did it wrong!"
            @message = "Consumer key wasn't recognized"
            return false
          end
        else
          render("No consumer key")
          return false
        end
    </pre>

    If the key and secret match, then within the same 'lti_authorize!' endpoint
    OpenDSA checks if the request is valid or not, or if the timestamp on the
    request is too old. If so, then OpenDSA returns an error otherwise, returns
    "<em>true</em>" to the <em>launch</em> endpoint, which means the request
    is valid.
    <br><br>

    <pre>
        if !params.has_key?(:selection_directive)
          if !@tp.valid_request?(request)
            @message = "The OAuth signature was invalid"
            return false
          end

          if Time.now.utc.to_i - @tp.request_oauth_timestamp.to_i > 60*60
            @message = "Your request is too old."
            return false
          end

          if was_nonce_used_in_last_x_minutes?(@tp.request_oauth_nonce, 60)
            @message = "Why are you reusing the nonce?"
            return false
          end
        end

        return true
      end
    </pre>

    Once the request has been validated, OpenDSA returns back to the
    <em>"launch"</em> endpoint and calls <em>"ensure_user"</em> method after
    that.<br><br>

    <pre>
      ensure_user()
    </pre>

    Within <em>"ensure_user"</em> method, OpenDSA checks if a user with the
    same email exists or not and creates a new user if that email is not found
    and finally, signs in that user to start his session.<br><br>
    <pre>
      def ensure_user
        email = params[:lis_person_contact_email_primary]
        @user = User.where(email: email).first
        if @user.blank?
          # TODO: should mark this as LMS user then prevent this user from
          login to opendsa domain
          @user = User.new(:email => email,
                           :password => email,
                           :password_confirmation => email,
                           :first_name => params[:lis_person_name_given],
                           :last_name => params[:lis_person_name_family])
          @user.save
        end
        sign_in @user
      end
    </pre>

    After a new user has been created, OpenDSA calls <em>"lti_enroll"</em>
    method with the course offering object, which enrolls user into this
    particular course.<br><br>
    <pre>
      lti_enroll(@course_offering)
    </pre>

    Within the <em>"lti_enroll"</em> method, OpenDSA checks if the course
    offering exists and allows users to enroll or not. After that, OpenDSA
    enrolls the user if he has not already enrolled into this specific course
    offering.<br><br>
    <pre>
      def lti_enroll(course_offering, role = CourseRole.student)
        if course_offering &&
          course_offering.can_enroll? &&
          !course_offering.is_enrolled?(current_user)

          CourseEnrollment.create(
            course_offering: course_offering,
            user: current_user,
            course_role: role)
        end
      end
    </pre>

    Once the request has been validated and a user has been enrolled, OpenDSA
    reads the html content of the exercise, which is shown to the user in an
    iframe within the tool consumer.<br><br>
    <pre>
      @section_html = File.read(File.join('public/OpenDSA/Books',
                                params[:custom_book_path],
                                '/lti_html/',
                                "#{params[:custom_section_file_name].to_s}.html"
                                )) and return
    end
  </pre>

  When a student completes an exercise, OpenDSA sends a new request to
  <strong>assessment</strong> endpoint from JavaScript. The <em>assessment</em>
  method sends score back to Tool Consumer if this exercise was launched as an
  assessment.
  <br><br>
  Within the <em>assessment</em> endpoint, initially OpenDSA checks if the
  exercise is from a book instance or not. If the exercise is from a book
  instance then the request will have <em>"instBookSectionExerciseId"</em>
  parameter. OpenDSA fetches the number of attempts on this exercise and
  current progress of a student using the book instance exercise id and user id.
  <pre>

  def assessment
    request_params = JSON.parse(request.body.read.to_s)
    hasBook = request_params.key?('instBookId')

    if hasBook
      inst_section = InstSection.find_by(id: request_params['instSectionId'])

      @odsa_exercise_attempts =
      OdsaExerciseAttempt.where("inst_book_section_exercise_id=? AND user_id=?",
                                  request_params['instBookSectionExerciseId'],
                                  current_user.id).select(
                                  "id, user_id, question_name, request_type,
                                  correct, worth_credit, time_done, time_taken,
                                  earned_proficiency, points_earned,
                                  pe_score, pe_steps_fixed")
      @odsa_exercise_progress =
      OdsaExerciseProgress.where("inst_book_section_exercise_id=? AND
      user_id=?",
                                  request_params['instBookSectionExerciseId'],
                                  current_user.id).select("user_id,
                                  current_score, highest_score,
                                  total_correct, proficient_date,first_done,
                                  last_done")
    </pre>
    If the exercise is not from a book instance then in that case the request
    will have <em>"instCourseOfferingExerciseId"</em> parameter, which means
    that standalone exercise is directly added to the course. For the standalone
    exercises, OpenDSA fetches the number of attempts on this exercise and
    current progress of the student using the course offering exercise id and
    user id.<br><br>
    <pre>
    else
      @odsa_exercise_attempts =
      OdsaExerciseAttempt.where("inst_course_offering_exercise_id=? AND
      user_id=?",
                                  request_params['instCourseOfferingExerciseId']
                                  , current_user.id).select(
                                  "id, user_id, question_name, request_type,
                                  correct, worth_credit, time_done, time_taken,
                                  earned_proficiency, points_earned,
                                  pe_score, pe_steps_fixed")
      @odsa_exercise_progress =
      OdsaExerciseProgress.where("inst_course_offering_exercise_id=? AND
      user_id=?",
                                  request_params['instCourseOfferingExerciseId']
                                  , current_user.id).select("user_id,
                                  current_score, highest_score,
                                  total_correct, proficient_date,first_done,
                                  last_done")
    end
    </pre>

    Once the progress and the number of attempts have been fetched, OpenDSA
    sends these statistics back in tabular form to the Tool Consumer along with
    the results of the exercise and students can view these stats in Tool
    Consumer.<br><br>
    <pre>
    a = @odsa_exercise_attempts
    b = @odsa_exercise_progress
    TableHelper.arg(a, b)
    f = render_to_string "lti/table.html.erb"
    </pre>
    <p>
      The progress and attempts can be checked in Canvas by clicking on Grades
      -> [Name of Assignment]. Following in how this result is shown in tabular
      form in Canvas.
      <div class="text-center">
        <%= image_tag "OpenDSA/exercise_progress.png", style:'width:40%' %>
      </div>
    </p>

    When the above stats and results have been gathered, OpenDSA fetches the
    launch parameters from the request and finds the authentication credentials
    associated with the public consumer key in order to send the results back to
    tool consumer. These launch parameters are same as the one received in the
    initial launch request. These parameters are saved within a JavaScript
    variable and are passed to assessment endpoint with the request. <br><br>
    <pre>
      launch_params = request_params['toParams']['launch_params']
      if launch_params
        key = launch_params['oauth_consumer_key']
        $oauth_creds = LmsAccess.get_oauth_creds(key)
      else
        @message = "The tool never launched"
        render(:error)
      end
    </pre>

    Once the credentials have been fetched, OpenDSA submits the score back to
    tool consumer. To do so, OpenDSA creates a tool provider object using the
    key and a secret and after that OpenDSA extends the tool provider object
    with the OutcomeData extension provided by the IMS-LTI gem.<br><br>
    <pre>
      lti_param = {
        "lis_outcome_service_url" =>
        "#{launch_params['lis_outcome_service_url']}",
        "lis_result_sourcedid" => "#{launch_params['lis_result_sourcedid']}"
      }
      @tp = IMS::LTI::ToolProvider.new(key, $oauth_creds[key], lti_param)

      @tp.extend IMS::LTI::Extensions::OutcomeData::ToolProvider
    </pre>
    After that OpenDSA checks whether the tool was launched as an
    outcome service or not. If the tool was not launched as an outcome service
    means that the results cannot be reported back to the Tool Consumer.
    <br><br>
    <pre>
      if !@tp.outcome_service?
        @message = "This tool wasn't lunched as an outcome service"
        render(:error)
      end

      # post the given score to the TC
      score = (request_params['toParams']['score'] != '' ?
      request_params['toParams']['score'] : nil)
      #res = @tp.post_replace_result!(score)
      res = @tp.post_extended_replace_result!(score: score, text: f)
    </pre>
    If the tool was launched as an assignment, then OpenDSA has to send the
    final results of every assessment back to the tool consumer.
    Therefore, in the request Tool Consumer
    sends <strong><em>lis_outcome_service_url</em></strong>
    and <strong><em>lis_result_sourcedid</em></strong> parameters.
    The fist parameter is a URL used to send the score back, and
    the second parameter identifies a unique row and column within
    the Tool Consumer's gradebook.
    If these two parameters are not present, then OpenDSA throws an error and
    otherwise sends the result back to the tool consumer.
    The IMS-LTI gem enables to accomplish all of this using
    <em>"post_extended_replace_result"</em> method.

    <br><br>

    Once the results have been posted and if the exercise was launched from a
    book instance, OpenDSA saves in the database that the result has been
    posted for this exercise along with current time.<br><br>
    <pre>
      if res.success?
        if hasBook
          inst_section.lms_posted = true
          inst_section.time_posted = Time.now
          inst_section.save!
        end
        render :json => { :message => 'success', :res => res.to_json }.to_json
    </pre>
    If there is some error in posting the results, OpenDSA saves in the database
    that the result posting failed for this instance and throws an
    error back to Tool Consumer.<br><br>
    <pre>
      else
        if hasBook
          inst_section.lms_posted = false
          inst_section.save!
        end
        render :json => { :message => 'failure', :res => res.to_json }.to_json,
        :status => :bad_request
        error = Error.new(:class_name => 'post_replace_result_fail',
            :message => res.inspect, :params => lti_param.to_s)
        error.save!
      end
    </pre>
    <br>

    This is how LTI is implemented in OpenDSA when a student tries to access an
    OpenDSA exercise through a learning management system. Now, click <%=
    link_to "here", lti_opendsa_instructor_path %> to read how OpenDSA
    implements LTI when instructors add exercises to their courses.

  </span>
</div>
