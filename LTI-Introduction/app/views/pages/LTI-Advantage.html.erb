<div class="row" style="margin:50px">
  <span class="span12">
    <div class="text-center">
      <h1>Learning Tools Interoperability</h1>
    </div><br>
    <p>
      Learning Tools Interoperability is a specification
      developed by <a href="https://www.imsglobal.org/">IMS Global Learning
      Consortium</a> to establish a standard way to integrate
      remotely hosted learning applications with platforms like
      learning management systems (LMS) and similar educational
      environments. The LTI specification enhances the functionality provided
      by a Tool Consumer and provides instructors with various applications
      that they can embed into their course. <%= link_to "Click here",
      lti_path %> to read more about LTI.
    </p>
    <h3>LTI Advantage</h3>
    <p>
      LTI Advantage is next step towards interoperability and is a package of
      extensions that enable deeper integration of tools with LMS. These
      extensions are built on the core LTI standard (v1.1 or higher).
      Currently, there are following three LTI Advantage extensions:
    </p>
    <p>
      <strong>Names and Role Provisioning Services:</strong> This extension
      enables LMS to send list of course participants and faculty defined
      groups to learning tools. It also allows to learn who has not yet
      accessed a tool. It is a new name of Membership Service.
    </p>
    <p>
      <strong>Deep Linking:</strong> Provides a more intuitive way to add
      content from a tool provider by providing support for various types of
      content items such as a playlists, hyperlink, iframe or a file. It is the
      new name for Content Item Message.
    </p>
    <p>
      <strong>Assignment and Grade Services:</strong> Enables tools to pass
      results of assignment back to the LMS. Along with the scores, it also
      supports comments to be returned to LMS if provided. It enables
      instructors to maintain grades and comments in one a single place (LMS
      grade book). It is the new name for Gradebook Service.
    </p>
    <br>
    Following is a detailed explanation of each of these extensions with
    examples taken from IMS website.
    <br>
    <h3>Names and Role Provisioning Services</h3>
    <p>
      The Names and Role Provisioning Services provides access to data about
      users' roles within a course for example a list of enrollments in a
      course. It automates course enrollment in tool providers and enables
      instructors to receive reporting on student activity within a learning
      tool, such as the list of users and their roles or a list of participants
      who have not accessed the course yet. LTI does not pass user information
      in its default configuration and Names and Role Provisioning Services
      automates the provision of student lists to an external tool. Sending the
      list of students enables external tool to pre-provision accounts for all
      users rather than creating one when student launches for the first time.
    </p>
    <p>
      In order for a tool to be able to use this service, in LTI 1.x, the tool
      consumers have to pass an endpoint as a custom parameter with the name of
      <strong>custom_context_memberships_url</strong>. To implement Names and
      Role Provisioning Services, a TP only needs to send a signed GET request
      to this endpoint and in return TP will receive a membership list.
    </p>

    <p>
      A Tool Provider can send one or more of the following query parameters in
      a GET request:
      <p>
        <strong>role</strong> - The specific role for a membership. Following
        are the roles available in Canvas.<br>
        <div class="text-center">
          <%= image_tag "lti_roles.png", style:'width:50%' %>
        </div>
      </p>
      <p>
        <strong>limit</strong> - Limit the maximum number of items per page.
      </p>
      <p>
        <strong>rlid</strong> - Memberships having access of this resource link.
      </p>
      <p>
        The following code fetches first 5 users with role
        <em>urn:lti:role:ims/lis/Learner</em> who have access to a resource
        link with ID rl999.
        <pre>
          <code>role=urn%3Alti%3Arole%3Aims%2Flis%2FLearner&limit=5&rlid=rl999</code></pre>
      </p>
    </p>
    <h3>Deep Linking</h3>
    <p>
      The deep linking provides a more intuitive way to add various types of
      content items from a Tool Provider (TP) into the tool consumer. This
      extension supports different types of content items such as a hyperlink,
      an embedded image or other media type, embedded HTML, iframe and a file.
      A typical use case as mentioned on IMS website would be: "to allow a user
      within a Tool Consumer (TC) to click a button on the toolbar of a text
      box editor, which opens a TP within an iframe (or pop-up window), use the
      interface provided to select one or more items, and have the selected
      item(s) returned to the TC and inserted into the text box.  This may be
      an instructor adding content to a content page, or could be a student
      selecting an attachment to submit as part of an assignment".
    </p>
    <p>
      The first step in deep linking message is that a POST request is
      submitted from Tool Consumer to Tool Provider similar to LTI launch
      request except that <em>lti_message_type</em> has a value of
      <em>ContentItemSelectionRequest</em>. The next step is for a Tool
      Provider is to verify if it is a valid LTI request and after that provide
      an interface for selecting content items. Once user select content items,
      TP should return the details of selected items in a JSON array back to
      the TC at URL received in <em>content_item_return_url</em> parameter.
      Remember that, TP should always return user to TC even if they do not
      select any items.
    </p>
    <p>
      When Tool Consumer sends a POST request to Tool Provider, it may send the
      following parameters:
    </p>
    <strong>lti_message_type=</strong> ContentItemSelectionRequest (Required)
    <p>
      The ContentItemSelectionRequest in lti_message_type indicates that this
      request represents a deep linking selection message.
    </p>

    <strong>lti_version=</strong> LTI-1p0 (Required) <br>
    <p>
      This indicates the version of LTI specification.
    </p>

    <strong>accept_media_types=</strong>
    application/vnd.ims.lti.v1.ltilink,image/*, text/html (Required)
    <br>
    <p>
      This field contains a comma-separated list of MIME types which Tool
      Consumer can accept.
    </p>

    <strong>accept_presentation_document_targets=</strong>
    embed,frame,iframe,window,popup,overlay (Required)
    <br>
    <p>
      This field contains a comma-separated list of ways in which selected
      content item can be requested to open. None means that the content item
      is not intended for display and will only be used for storing or
      processing.
    </p>

    <strong>content_item_return_url=</strong> [URL] (Required) <br>
    <p>
      This field contains a URL where Tool Provider redirects the user back to
      Tool Consumer.
    </p>

    <strong>accept_unsigned=</strong> false | true (Optional)
    <br>
    <p>
      This field indicates whether the Tool Consumer accepts an unsigned return
      message or not.
    </p>

    <strong>accept_multiple=</strong> false | true (Optional)
    <br>
    <p>
      accept_multiple indicates if user can select multiple content items or not.
    </p>

    <strong>accept_copy_advice=</strong> false | true (Optional)
    <br>
    <p>
      This field indicates if the Tool Consumer will make a local copy of a
      content item. Tool Providers can send <em>expiresAt</em> parameter to let
      TC know that the item will expire on that date.
    </p>

    <strong>accept_unsigned=</strong> false | true (Optional)
    <br>
    <p>
      This field indicates whether the Tool Consumer accepts an unsigned return
      message or not.
    </p>

    <p>
      Along with the fields mentioned above, TC can also send additional fields
      like text, title, data, auto_create (to indicate if content items
      returned by the TP would be automatically persisted) and other parameters
      about Tool Consumer and user.
    </p>
    <br>

    <p>
      Once content item(s) has been selected, Tool Provider should redirect
      user to Tool Consumer by sending POST request. It may send the following
      parameters in the request:
    </p>

    <strong>lti_message_type=</strong> ContentItemSelection (Required)
    <br>
    <p>
      The ContentItemSelection in lti_message_type indicates that this message
      contains an array of content items.
    </p>

    <strong>lti_version=</strong> LTI-1p0 (Required)
    <br>
    <p>
      This indicates the version of LTI specification.
    </p>

    <strong>content_items=</strong> [JSON Array] (Optional)
    <br>
    <p>
      The content_items parameter should be a JSON array containing details of
      each of the items selected. The following example JSON of the
      content_items parameter value is taken from IMS website:
      <pre>
        <code>
          {
            "@context" : "http://purl.imsglobal.org/ctx/lti/v1/ContentItem",
            "@graph" : [
              { "@type" : "ContentItem",
                "@id" : ":item1",
                "url" : "http://www.imsglobal.org",
                "title" : "The IMS Global website",
                "mediaType" : "text/html"
              },
              { "@type" : "LtiLinkItem",
                "@id" : ":item2",
                "icon" : {
                  "@id" : "http://tool.provider.com/icons/small.png",
                  "width" : 50,
                  "height" : 50
                },
                "thumbnail" : {
                  "@id" : "http://tool.provider.com/images/thumb.jpg",
                  "width" : 100,
                  "height" : 150
                },
                "title" : "Open sIMSon application",
                "text" : "The &lt;em&gt;sIMSon&lt;/em&gt; application provides
                a collaborative space for developing semantic modelling
                skills.",
                "mediaType" : "application/vnd.ims.lti.v1.ltilink",
                "custom" : {
                  "level" : "novice",
                  "mode" : "interactive"
                },
                "placementAdvice" : {
                  "presentationDocumentTarget" : "window",
                  "windowTarget" : "anLTIApp"
                }
              },
              { "@type" : "FileItem",
                "@id" : ":item3",
                "url" : "http://tool.provider2.com/animation/sample.swf",
                "icon" : {
                  "@id" : "http://tool.provider2.com/icon/sample.png",
                  "width" : 45,
                  "height" : 45
                },
                "text" : "Watch this animation.",
                "mediaType" : "application/x-shockwave-flash",
                "copyAdvice" : false,
                "placementAdvice" : {
                  "displayWidth" : 800,
                  "presentationDocumentTarget" : "iframe",
                  "displayHeight" : 600
                }
              }
            ]
          }
        </code>
      </pre>
    </p>
    <strong>data=</strong> [Same as received] (Optional)
    <br>
    <p>
      If Tool Consumer sent this parameter in original request, then Tool
      Provider should return it as is to TC.
    </p>

    <strong>lti_msg=</strong> [Message to be displayed] (Optional)
    <br>
    <p>
      Message to be displayed to user when returning.
    </p>

    <p>
      Along with the above parameter, TP can return additional parameters such
      as <em>lti_log</em> to give TC a message to log when it return normally,
      <em>lti_errorlog</em> to give TC a plain text error message to log when
      TP encounters an error and <em>lti_errormsg</em> to provide details about
      error to display to user.
    </p>
  </span>

</div>
